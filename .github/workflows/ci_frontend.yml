name: ci frontend

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:

  test_frontend:
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:5.7
        env:
            MYSQL_ALLOW_EMPTY_PASSWORD: yes
            MYSQL_USER: test_user
            MYSQL_PASSWORD: password
            MYSQL_ROOT_PASSWORD: password
            MYSQL_DATABASE: test_db
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
      # download repository
      - uses: actions/checkout@v3

      #- uses: conda-incubator/setup-miniconda@v2
      #  with:
      #    python-version: 3.6.9
      #    auto-activate-base: false
      #    channels: defaults,conda-forge,bioconda


      #- name: test install conda
      #  run: |
      #    conda install flake8
      #    conda list
      #    conda info
        
      #- name: install ngs-bits
      #  run: conda install ngs-bits

      #- name: install perl
      #  uses: shogo82148/actions-setup-perl@v1
      #  with:
      #    perl-version: '5.34'

      #- name: install vep
      #  run: src/tools/download_tools_vep.sh

      #- name: install vep
      #  run: docker pull ensemblorg/ensembl-vep:release_104.3
      
      #- name: start vep container
      #  run: |
      #    docker images
      #    docker run -d -it 43bc9e0feefb /bin/bash > vep-container.txt
      #    docker ps -a
      
      #- name: install vep plugins
      #  run: |
      #    vepcontainer=$(cat vep-container.txt)
      #    docker exec $vepcontainer INSTALL.pl -a p --PLUGINS REVEL,CADD,MaxEntScan --NO_UPDATE --NO_BIOPERL --NO_TEST --NO_HTSLIB

      #    docker exec $vepcontainer cp /opt/vep/.vep/Plugins/REVEL.pm modules
      #    docker exec $vepcontainer cp /opt/vep/.vep/Plugins/CADD.pm modules
      #    docker exec $vepcontainer cp /opt/vep/.vep/Plugins/MaxEntScan.pm modules


      #- name: install maxentscan
      #  run: |
      #    vepcontainer=$(cat vep-container.txt)
      #    docker exec $vepcontainer mkdir -p MaxEntScan
      #    docker exec $vepcontainer wget http://hollywood.mit.edu/burgelab/maxent/download/fordownload.tar.gz MaxEntScan
      #    docker exec $vepcontainer tar xzf MaxEntScan/fordownload.tar.gz
      #    docker exec $vepcontainer mv MaxEntScan/fordownload/* .
      #    docker exec $vepcontainer rm -rf MaxEntScan/fordownload*
      #    docker exec $vepcontainer chmod -R 755 MaxEntScan
          
      #- name: test vep
      #  run: |
      #    vepcontainer=$(cat vep-container.txt)
      #    docker exec $vepcontainer ./vep --help



      
      # this step installs ngs-bits though miniconda
      # $CONDA is an environment variable pointing to the root of the miniconda directory
      #- name: prepare conda
      #  run: |
      #    $CONDA/bin/conda config --add channels conda-forge
      #    $CONDA/bin/conda config --add channels bioconda
      #    $CONDA/bin/conda config --add channels defaults
          

      #- name: install samtools
      #  run: |
      #    conda install -c bioconda samtools
      #    conda list
      #    conda info
      #    ls -l $CONDA/bin

      #- name: install ngs-bits
      #  run: |
      #    $CONDA/bin/conda install ngs-bits
      #    $CONDA/bin/ReadQC --help

      
      # build python
      - name: Set up Python 3.6.9
        uses: actions/setup-python@v4
        with:
          python-version: '3.6.9'  # use 3.x to use the most up-to-date python3 version
          architecture: 'x64' # Optional - x64 or x86 architecture, defaults to x64
      - uses: actions/cache@v2 # cache the python environment to speed up tests
        with:
          path: ${{ env.pythonLocation }}
          key: ${{ env.pythonLocation }}-${{ hashFiles('requirements.txt') }}
      - name: Install dependencies
        run: |
          python3 -m pip install --upgrade pip
          pip install wheel setuptools
          python3 -m pip install --upgrade setuptools wheel
          pip install pytest
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      #- name: Lint with flake8
      #  run: |
      #    # stop the build if there are Python syntax errors or undefined names
      #    flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
      #    # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
      #    flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: tets
        run: |
          sudo spliceai -h




      - name: install htslib
        run: |
          sudo apt-get update
          sudo apt-get install autoconf automake make gcc perl zlib1g-dev libbz2-dev liblzma-dev libcurl4-gnutls-dev libssl-dev
          cd /usr/bin
          sudo wget https://github.com/samtools/htslib/releases/download/1.16/htslib-1.16.tar.bz2
          sudo tar -vxjf htslib-1.16.tar.bz2
          cd htslib-1.16
          sudo make
          echo "/usr/bin/htslib-1.16" >> $GITHUB_PATH


      - name: install ngs-bits
        run: docker pull quay.io/biocontainers/ngs-bits:2022_07--py310hb611552_0

      - name: start ngs-bits container
        run: |
          docker images
          docker run -d -v /tmp:/tmp -v /home/runner/work/HerediVar/HerediVar/src/annotation_service/tests/data/testdbs:/data -it 881f65da80a2  /bin/bash > ngs-bits-container.txt
          docker ps -a

      - name: test ngs-bits
        run: |
          ngsbitscontainer=$(cat ngs-bits-container.txt)
          docker exec $ngsbitscontainer ReadQC --help


      - name: Verify MySQL connection from container 
        run: |
          sudo apt-get update
          sudo apt-get install -y mysql-client
          export MOST_RECENT_DUMP_DATE=$(cat src/tools/database_dumper/most_recent_dump.txt)
          gunzip src/tools/database_dumper/structure/structure-$MOST_RECENT_DUMP_DATE.sql.gz
          mysql --host 0.0.0.0 -uroot -ppassword test_db < src/tools/database_dumper/structure/structure-$MOST_RECENT_DUMP_DATE.sql
          mysql --host 0.0.0.0 -uroot -ppassword test_db < src/frontend_celery/tests/data/heredivar_test_data.sql
          mysql --host 0.0.0.0 -uroot -ppassword test_db -e "SHOW TABLES"




      
      
      # prepare keycloak
      - uses: actions/setup-java@v1
        with:
          java-version: 11
      - name: Prepare Keycloak
        run: |
          chmod 755 src/frontend_celery/tests/script/prepare_keycloak.sh
          src/frontend_celery/tests/script/prepare_keycloak.sh

      # start keycloak
      - name: Start Keycloak
        run: |
          chmod 755 src/frontend_celery/tests/script/start_keycloak_for_tests.sh
          src/frontend_celery/tests/script/start_keycloak_for_tests.sh





      # run tests
      - name: run tests
        run: |
          export NGSBITS_CONTAINER_ID=$(cat ngs-bits-container.txt)

          chmod 755 src/frontend_celery/tests/script/run_tests.sh
          src/frontend_celery/tests/script/run_tests.sh
        ##### !secrets are loaded from github: https://github.com/Azure/actions-workflow-samples/blob/master/assets/create-secrets-for-GitHub-workflows.md
        env:
          WEBAPP_ENV: githubtest
          FLASK_SECRET_KEY: The_testing_key
          CLIENT_ID: ${{ secrets.CLIENT_ID }}
          CLIENT_SECRET: ${{ secrets.CLIENT_SECRET }}
          CLINVAR_API_KEY: ${{ secrets.CLINVAR_API_KEY }}
        shell: bash

      
      - name: test annotation service
        run: |
          echo $PATH
          export NGSBITS_CONTAINER_ID=$(cat ngs-bits-container.txt)

          chmod 755 src/annotation_service/tests/run_tests.sh
          src/annotation_service/tests/run_tests.sh
        env:
          WEBAPP_ENV: githubtest
        shell: bash


